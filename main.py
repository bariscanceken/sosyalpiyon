# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'page-start.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, uic
import mysql.connector
from mysql.connector import Error
from itsdangerous import URLSafeTimedSerializer
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import bcrypt
import random
import string
import sys
import chess
import chess.pgn
from PyQt5.QtWidgets import QGridLayout, QPushButton, QVBoxLayout, QLabel, QHBoxLayout, QListWidget, QFrame, QProgressBar
import os
import io
import chess.engine


global_user_id = None

PIECE_IMAGES = {
    'P': 'wP.png', 'N': 'wN.png', 'B': 'wB.png', 'R': 'wR.png', 'Q': 'wQ.png', 'K': 'wK.png',
    'p': 'bp.png', 'n': 'bN.png', 'b': 'bB.png', 'r': 'bR.png', 'q': 'bQ.png', 'k': 'bK.png',
}

class DatabaseConnection:
    def __init__(self):
        self.connection = None
        try:
            self.connection = mysql.connector.connect(
                host='localhost',
                user='root',
                password='bariscan',
                database='sosyalpiyon'
            )
            if self.connection.is_connected():
                print("MySQL veritabanına başarıyla bağlandı")
                # Veritabanı bağlantısını test et
                cursor = self.connection.cursor()
                cursor.execute("SELECT COUNT(*) FROM users")
                count = cursor.fetchone()[0]
                print(f"Veritabanında {count} kullanıcı bulundu")
                cursor.close()
        except Error as e:
            print(f"Bağlantı hatası: {e}")

    def get_connection(self):
        if not self.connection or not self.connection.is_connected():
            try:
                self.connection = mysql.connector.connect(
                    host='localhost',
                    user='root',
                    password='bariscan',
                    database='sosyalpiyon'
                )
                print("MySQL veritabanına yeniden bağlandı")
            except Error as e:
                print(f"Yeniden bağlantı hatası: {e}")
        return self.connection

    def close_connection(self):
        if self.connection and self.connection.is_connected():
            self.connection.close()
            print("MySQL bağlantısı kapatıldı")



class Ui_LoginDialog(object):
    def setupUi(self, LoginDialog):
        LoginDialog.setObjectName("LoginDialog")
        LoginDialog.resize(1280, 800)
        LoginDialog.setStyleSheet("QDialog {\n"
"    background-color: #1a1a1a;\n"
"}\n"
"QWidget {\n"
"    font-family: \'Segoe UI\', Arial, sans-serif;\n"
"    color: #ffffff;\n"
"}\n"
"QLineEdit {\n"
"    border: 1px solid #3d3d3d;\n"
"    border-radius: 8px;\n"
"    padding: 12px;\n"
"    background: #2d2d2d;\n"
"    color: #ffffff;\n"
"    font-size: 14px;\n"
"    min-height: 20px;\n"
"}\n"
"QLineEdit:focus {\n"
"    border-color: #4CAF50;\n"
"}\n"
"QPushButton {\n"
"    background-color: transparent;\n"
"    border: 2px solid #4CAF50;\n"
"    color: #4CAF50;\n"
"    padding: 12px 24px;\n"
"    border-radius: 8px;\n"
"    font-size: 14px;\n"
"    font-weight: bold;\n"
"    min-height: 20px;\n"
"}\n"
"QPushButton:hover {\n"
"    background-color: #4CAF50;\n"
"    color: white;\n"
"}\n"
"QPushButton#registerButton {\n"
"    background-color: transparent;\n"
"    border: 2px solid #4CAF50;\n"
"    color: #4CAF50;\n"
"}\n"
"QPushButton#registerButton:hover {\n"
"    background-color: #4CAF50;\n"
"    color: white;\n"
"}\n"
"QLabel {\n"
"    color: #ffffff;\n"
"}\n"
"QLabel#logoLabel {\n"
"    font-size: 36px;\n"
"    font-weight: bold;\n"
"    color: #4CAF50;\n"
"}\n"
"QLabel#welcomeLabel {\n"
"    font-size: 18px;\n"
"    color: #ffffff;\n"
"}\n"
"QLabel#descriptionLabel {\n"
"    font-size: 16px;\n"
"    color: #b0b0b0;\n"
"}\n"
"QLabel#switchLabel {\n"
"    color: #4CAF50;\n"
"    font-size: 14px;\n"
"    padding: 12px 24px;\n"
"    border: 2px solid #4CAF50;\n"
"    border-radius: 8px;\n"
"    background-color: transparent;\n"
"    margin: 10px 0;\n"
"    transition: all 0.3s ease;\n"
"}\n"
"QLabel#switchLabel:hover {\n"
"    color: white;\n"
"    background-color: #4CAF50;\n"
"    cursor: pointer;\n"
"    transform: translateY(-2px);\n"
"    box-shadow: 0 4px 8px rgba(76, 175, 80, 0.2);\n"
"}\n"
"QCheckBox {\n"
"    color: #ffffff;\n"
"    font-size: 14px;\n"
"    spacing: 8px;\n"
"}\n"
"QCheckBox::indicator {\n"
"    width: 18px;\n"
"    height: 18px;\n"
"    border: 2px solid #4CAF50;\n"
"    border-radius: 4px;\n"
"    background-color: transparent;\n"
"}\n"
"QCheckBox::indicator:checked {\n"
"    background-color: #4CAF50;\n"
"    border-color: #4CAF50;\n"
"}\n"
"QCheckBox::indicator:hover {\n"
"    border-color: #45a049;\n"
"}\n"
"QLabel#forgotPasswordLink {\n"
"    color: #4CAF50;\n"
"    font-size: 14px;\n"
"    text-decoration: underline;\n"
"    cursor: pointer;\n"
"    margin: 5px 0;\n"
"}\n"
"QLabel#forgotPasswordLink:hover {\n"
"    color: #45a049;\n"
"}\n"
"")
        self.horizontalLayout = QtWidgets.QHBoxLayout(LoginDialog)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.leftPanel = QtWidgets.QWidget(LoginDialog)
        self.leftPanel.setStyleSheet("background-color: #2d2d2d;")
        self.leftPanel.setObjectName("leftPanel")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.leftPanel)
        self.verticalLayout.setObjectName("verticalLayout")
        spacerItem = QtWidgets.QSpacerItem(20, 150, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.logoLabel = QtWidgets.QLabel(self.leftPanel)
        self.logoLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.logoLabel.setObjectName("logoLabel")
        self.verticalLayout.addWidget(self.logoLabel)
        self.welcomeLabel = QtWidgets.QLabel(self.leftPanel)
        self.welcomeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.welcomeLabel.setObjectName("welcomeLabel")
        self.verticalLayout.addWidget(self.welcomeLabel)
        self.descriptionLabel = QtWidgets.QLabel(self.leftPanel)
        self.descriptionLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.descriptionLabel.setObjectName("descriptionLabel")
        self.verticalLayout.addWidget(self.descriptionLabel)
        spacerItem1 = QtWidgets.QSpacerItem(20, 150, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem1)
        self.horizontalLayout.addWidget(self.leftPanel)
        self.rightPanel = QtWidgets.QWidget(LoginDialog)
        self.rightPanel.setStyleSheet("background-color: #1a1a1a;")
        self.rightPanel.setObjectName("rightPanel")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.rightPanel)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        spacerItem2 = QtWidgets.QSpacerItem(20, 100, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem2)
        self.stackedWidget = QtWidgets.QStackedWidget(self.rightPanel)
        self.stackedWidget.setObjectName("stackedWidget")
        self.loginPage = QtWidgets.QWidget()
        self.loginPage.setObjectName("loginPage")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.loginPage)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.loginTitle = QtWidgets.QLabel(self.loginPage)
        self.loginTitle.setStyleSheet("font-size: 24px;\n"
"font-weight: bold;\n"
"color: #ffffff;")
        self.loginTitle.setAlignment(QtCore.Qt.AlignCenter)
        self.loginTitle.setObjectName("loginTitle")
        self.verticalLayout_3.addWidget(self.loginTitle)
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem3)
        self.usernameInput = QtWidgets.QLineEdit(self.loginPage)
        self.usernameInput.setObjectName("usernameInput")
        self.verticalLayout_3.addWidget(self.usernameInput)
        spacerItem4 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem4)
        self.passwordInput = QtWidgets.QLineEdit(self.loginPage)
        self.passwordInput.setEchoMode(QtWidgets.QLineEdit.Password)
        self.passwordInput.setObjectName("passwordInput")
        self.verticalLayout_3.addWidget(self.passwordInput)
        self.forgotPasswordLink = QtWidgets.QLabel(self.loginPage)
        self.forgotPasswordLink.setStyleSheet("color: #4CAF50;\n"
"font-size: 14px;\n"
"text-decoration: underline;\n"
"cursor: pointer;\n"
"margin: 5px 0;")
        self.forgotPasswordLink.setAlignment(QtCore.Qt.AlignRight)
        self.forgotPasswordLink.setObjectName("forgotPasswordLink")
        self.verticalLayout_3.addWidget(self.forgotPasswordLink)
        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem5)
        self.loginButton = QtWidgets.QPushButton(self.loginPage)
        self.loginButton.setObjectName("loginButton")
        self.verticalLayout_3.addWidget(self.loginButton)
        spacerItem6 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem6)
        self.switchToRegister = QtWidgets.QLabel(self.loginPage)
        self.switchToRegister.setStyleSheet("color: #4CAF50;\n"
"font-size: 14px;\n"
"padding: 12px 24px;\n"
"border: 2px solid #4CAF50;\n"
"border-radius: 8px;\n"
"background-color: transparent;\n"
"margin: 10px 0;\n"
"transition: all 0.3s ease;")
        self.switchToRegister.setAlignment(QtCore.Qt.AlignCenter)
        self.switchToRegister.setObjectName("switchToRegister")
        self.verticalLayout_3.addWidget(self.switchToRegister)
        self.stackedWidget.addWidget(self.loginPage)
        self.registerPage = QtWidgets.QWidget()
        self.registerPage.setObjectName("registerPage")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.registerPage)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.registerTitle = QtWidgets.QLabel(self.registerPage)
        self.registerTitle.setStyleSheet("font-size: 24px;\n"
"font-weight: bold;\n"
"color: #ffffff;")
        self.registerTitle.setAlignment(QtCore.Qt.AlignCenter)
        self.registerTitle.setObjectName("registerTitle")
        self.verticalLayout_4.addWidget(self.registerTitle)
        spacerItem7 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem7)
        self.fullNameInput = QtWidgets.QLineEdit(self.registerPage)
        self.fullNameInput.setObjectName("fullNameInput")
        self.verticalLayout_4.addWidget(self.fullNameInput)
        spacerItem8 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem8)
        self.registerUsernameInput = QtWidgets.QLineEdit(self.registerPage)
        self.registerUsernameInput.setObjectName("registerUsernameInput")
        self.verticalLayout_4.addWidget(self.registerUsernameInput)
        spacerItem9 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem9)
        self.emailInput = QtWidgets.QLineEdit(self.registerPage)
        self.emailInput.setObjectName("emailInput")
        self.verticalLayout_4.addWidget(self.emailInput)
        spacerItem10 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem10)
        self.registerPasswordInput = QtWidgets.QLineEdit(self.registerPage)
        self.registerPasswordInput.setEchoMode(QtWidgets.QLineEdit.Password)
        self.registerPasswordInput.setObjectName("registerPasswordInput")
        self.verticalLayout_4.addWidget(self.registerPasswordInput)
        spacerItem11 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem11)
        self.confirmPasswordInput = QtWidgets.QLineEdit(self.registerPage)
        self.confirmPasswordInput.setEchoMode(QtWidgets.QLineEdit.Password)
        self.confirmPasswordInput.setObjectName("confirmPasswordInput")
        self.verticalLayout_4.addWidget(self.confirmPasswordInput)
        spacerItem12 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem12)
        self.privacyCheckbox = QtWidgets.QCheckBox(self.registerPage)
        self.privacyCheckbox.setObjectName("privacyCheckbox")
        self.verticalLayout_4.addWidget(self.privacyCheckbox)
        self.privacyLink = QtWidgets.QLabel(self.registerPage)
        self.privacyLink.setStyleSheet("color: #4CAF50;\n"
"font-size: 14px;\n"
"text-decoration: underline;")
        self.privacyLink.setAlignment(QtCore.Qt.AlignCenter)
        self.privacyLink.setObjectName("privacyLink")
        self.verticalLayout_4.addWidget(self.privacyLink)
        spacerItem13 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem13)
        self.registerButton = QtWidgets.QPushButton(self.registerPage)
        self.registerButton.setObjectName("registerButton")
        self.verticalLayout_4.addWidget(self.registerButton)
        spacerItem14 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem14)
        self.switchToLogin = QtWidgets.QLabel(self.registerPage)
        self.switchToLogin.setStyleSheet("color: #4CAF50;\n"
"font-size: 14px;\n"
"padding: 12px 24px;\n"
"border: 2px solid #4CAF50;\n"
"border-radius: 8px;\n"
"background-color: transparent;\n"
"margin: 10px 0;\n"
"transition: all 0.3s ease;")
        self.switchToLogin.setAlignment(QtCore.Qt.AlignCenter)
        self.switchToLogin.setObjectName("switchToLogin")
        self.verticalLayout_4.addWidget(self.switchToLogin)
        self.stackedWidget.addWidget(self.registerPage)
        self.privacyPage = QtWidgets.QWidget()
        self.privacyPage.setObjectName("privacyPage")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.privacyPage)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.privacyTitle = QtWidgets.QLabel(self.privacyPage)
        self.privacyTitle.setStyleSheet("font-size: 24px;\n"
"font-weight: bold;\n"
"color: #ffffff;")
        self.privacyTitle.setAlignment(QtCore.Qt.AlignCenter)
        self.privacyTitle.setObjectName("privacyTitle")
        self.verticalLayout_5.addWidget(self.privacyTitle)
        self.privacyText = QtWidgets.QTextEdit(self.privacyPage)
        self.privacyText.setStyleSheet("background-color: #2d2d2d;\n"
"color: #ffffff;\n"
"border: 1px solid #3d3d3d;\n"
"border-radius: 8px;\n"
"padding: 12px;\n"
"font-size: 14px;")
        self.privacyText.setReadOnly(True)
        self.privacyText.setObjectName("privacyText")
        self.verticalLayout_5.addWidget(self.privacyText)
        self.backToRegisterButton = QtWidgets.QPushButton(self.privacyPage)
        self.backToRegisterButton.setObjectName("backToRegisterButton")
        self.verticalLayout_5.addWidget(self.backToRegisterButton)
        self.stackedWidget.addWidget(self.privacyPage)
        self.forgotPasswordPage = QtWidgets.QWidget()
        self.forgotPasswordPage.setObjectName("forgotPasswordPage")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.forgotPasswordPage)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.forgotPasswordTitle = QtWidgets.QLabel(self.forgotPasswordPage)
        self.forgotPasswordTitle.setStyleSheet("font-size: 24px;\n"
"font-weight: bold;\n"
"color: #ffffff;")
        self.forgotPasswordTitle.setAlignment(QtCore.Qt.AlignCenter)
        self.forgotPasswordTitle.setObjectName("forgotPasswordTitle")
        self.verticalLayout_6.addWidget(self.forgotPasswordTitle)
        self.forgotPasswordDescription = QtWidgets.QLabel(self.forgotPasswordPage)
        self.forgotPasswordDescription.setStyleSheet("color: #b0b0b0;\n"
"font-size: 14px;\n"
"text-align: center;")
        self.forgotPasswordDescription.setAlignment(QtCore.Qt.AlignCenter)
        self.forgotPasswordDescription.setObjectName("forgotPasswordDescription")
        self.verticalLayout_6.addWidget(self.forgotPasswordDescription)
        self.forgotPasswordEmailInput = QtWidgets.QLineEdit(self.forgotPasswordPage)
        self.forgotPasswordEmailInput.setObjectName("forgotPasswordEmailInput")
        self.verticalLayout_6.addWidget(self.forgotPasswordEmailInput)
        self.sendResetLinkButton = QtWidgets.QPushButton(self.forgotPasswordPage)
        self.sendResetLinkButton.setObjectName("sendResetLinkButton")
        self.verticalLayout_6.addWidget(self.sendResetLinkButton)
        self.backToLoginLink = QtWidgets.QLabel(self.forgotPasswordPage)
        self.backToLoginLink.setStyleSheet("color: #4CAF50;\n"
"font-size: 14px;\n"
"text-decoration: underline;\n"
"cursor: pointer;\n"
"margin: 5px 0;")
        self.backToLoginLink.setAlignment(QtCore.Qt.AlignCenter)
        self.backToLoginLink.setObjectName("backToLoginLink")
        self.verticalLayout_6.addWidget(self.backToLoginLink)
        self.stackedWidget.addWidget(self.forgotPasswordPage)
        self.emailVerificationPage = QtWidgets.QWidget()
        self.emailVerificationPage.setObjectName("emailVerificationPage")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.emailVerificationPage)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.verificationTitle = QtWidgets.QLabel(self.emailVerificationPage)
        self.verificationTitle.setStyleSheet("font-size: 24px;\n"
"font-weight: bold;\n"
"color: #ffffff;")
        self.verificationTitle.setAlignment(QtCore.Qt.AlignCenter)
        self.verificationTitle.setObjectName("verificationTitle")
        self.verticalLayout_7.addWidget(self.verificationTitle)
        self.verificationDescription = QtWidgets.QLabel(self.emailVerificationPage)
        self.verificationDescription.setStyleSheet("color: #b0b0b0;\n"
"font-size: 14px;\n"
"text-align: center;")
        self.verificationDescription.setAlignment(QtCore.Qt.AlignCenter)
        self.verificationDescription.setObjectName("verificationDescription")
        self.verticalLayout_7.addWidget(self.verificationDescription)
        self.verificationCodeInput = QtWidgets.QLineEdit(self.emailVerificationPage)
        self.verificationCodeInput.setMaxLength(6)
        self.verificationCodeInput.setObjectName("verificationCodeInput")
        self.verticalLayout_7.addWidget(self.verificationCodeInput)
        self.verifyCodeButton = QtWidgets.QPushButton(self.emailVerificationPage)
        self.verifyCodeButton.setObjectName("verifyCodeButton")
        self.verticalLayout_7.addWidget(self.verifyCodeButton)
        self.resendCodeLink = QtWidgets.QLabel(self.emailVerificationPage)
        self.resendCodeLink.setStyleSheet("color: #4CAF50;\n"
"font-size: 14px;\n"
"text-decoration: underline;\n"
"cursor: pointer;\n"
"margin: 5px 0;")
        self.resendCodeLink.setAlignment(QtCore.Qt.AlignCenter)
        self.resendCodeLink.setObjectName("resendCodeLink")
        self.verticalLayout_7.addWidget(self.resendCodeLink)
        self.stackedWidget.addWidget(self.emailVerificationPage)
        self.resetPasswordPage = QtWidgets.QWidget()
        self.resetPasswordPage.setObjectName("resetPasswordPage")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.resetPasswordPage)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.resetPasswordTitle = QtWidgets.QLabel(self.resetPasswordPage)
        self.resetPasswordTitle.setStyleSheet("font-size: 24px;\n"
"font-weight: bold;\n"
"color: #ffffff;")
        self.resetPasswordTitle.setAlignment(QtCore.Qt.AlignCenter)
        self.resetPasswordTitle.setObjectName("resetPasswordTitle")
        self.verticalLayout_8.addWidget(self.resetPasswordTitle)
        self.resetPasswordDescription = QtWidgets.QLabel(self.resetPasswordPage)
        self.resetPasswordDescription.setStyleSheet("color: #b0b0b0;\n"
"font-size: 14px;\n"
"text-align: center;")
        self.resetPasswordDescription.setAlignment(QtCore.Qt.AlignCenter)
        self.resetPasswordDescription.setObjectName("resetPasswordDescription")
        self.verticalLayout_8.addWidget(self.resetPasswordDescription)
        self.resetCodeInput = QtWidgets.QLineEdit(self.resetPasswordPage)
        self.resetCodeInput.setMaxLength(6)
        self.resetCodeInput.setObjectName("resetCodeInput")
        self.verticalLayout_8.addWidget(self.resetCodeInput)
        self.verifyResetCodeButton = QtWidgets.QPushButton(self.resetPasswordPage)
        self.verifyResetCodeButton.setObjectName("verifyResetCodeButton")
        self.verticalLayout_8.addWidget(self.verifyResetCodeButton)
        self.resendResetCodeLink = QtWidgets.QLabel(self.resetPasswordPage)
        self.resendResetCodeLink.setStyleSheet("color: #4CAF50;\n"
"font-size: 14px;\n"
"text-decoration: underline;\n"
"cursor: pointer;\n"
"margin: 5px 0;")
        self.resendResetCodeLink.setAlignment(QtCore.Qt.AlignCenter)
        self.resendResetCodeLink.setObjectName("resendResetCodeLink")
        self.verticalLayout_8.addWidget(self.resendResetCodeLink)
        self.stackedWidget.addWidget(self.resetPasswordPage)
        self.newPasswordPage = QtWidgets.QWidget()
        self.newPasswordPage.setObjectName("newPasswordPage")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.newPasswordPage)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.newPasswordTitle = QtWidgets.QLabel(self.newPasswordPage)
        self.newPasswordTitle.setStyleSheet("font-size: 24px;\n"
"font-weight: bold;\n"
"color: #ffffff;")
        self.newPasswordTitle.setAlignment(QtCore.Qt.AlignCenter)
        self.newPasswordTitle.setObjectName("newPasswordTitle")
        self.verticalLayout_9.addWidget(self.newPasswordTitle)
        spacerItem15 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_9.addItem(spacerItem15)
        self.newPasswordDescription = QtWidgets.QLabel(self.newPasswordPage)
        self.newPasswordDescription.setStyleSheet("color: #b0b0b0;\n"
"font-size: 14px;\n"
"text-align: center;")
        self.newPasswordDescription.setAlignment(QtCore.Qt.AlignCenter)
        self.newPasswordDescription.setObjectName("newPasswordDescription")
        self.verticalLayout_9.addWidget(self.newPasswordDescription)
        self.newPasswordInput = QtWidgets.QLineEdit(self.newPasswordPage)
        self.newPasswordInput.setEchoMode(QtWidgets.QLineEdit.Password)
        self.newPasswordInput.setObjectName("newPasswordInput")
        self.verticalLayout_9.addWidget(self.newPasswordInput)
        self.confirmNewPasswordInput = QtWidgets.QLineEdit(self.newPasswordPage)
        self.confirmNewPasswordInput.setEchoMode(QtWidgets.QLineEdit.Password)
        self.confirmNewPasswordInput.setObjectName("confirmNewPasswordInput")
        self.verticalLayout_9.addWidget(self.confirmNewPasswordInput)
        spacerItem16 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_9.addItem(spacerItem16)
        self.saveNewPasswordButton = QtWidgets.QPushButton(self.newPasswordPage)
        self.saveNewPasswordButton.setObjectName("saveNewPasswordButton")
        self.verticalLayout_9.addWidget(self.saveNewPasswordButton)
        self.stackedWidget.addWidget(self.newPasswordPage)
        self.verticalLayout_2.addWidget(self.stackedWidget)
        spacerItem17 = QtWidgets.QSpacerItem(20, 100, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem17)
        self.horizontalLayout.addWidget(self.rightPanel)

        self.retranslateUi(LoginDialog)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(LoginDialog)

    def retranslateUi(self, LoginDialog):
        _translate = QtCore.QCoreApplication.translate
        LoginDialog.setWindowTitle(_translate("LoginDialog", "SosyalPiyon - Giriş"))    
        self.logoLabel.setText(_translate("LoginDialog", "SosyalPiyon"))
        self.welcomeLabel.setText(_translate("LoginDialog", "Satranç Dünyasına Hoş Geldiniz"))
        self.descriptionLabel.setText(_translate("LoginDialog", "Satranç tutkunlarıyla buluşun, sohbet edin, stratejilerinizi paylaşın ve yeni arkadaşlar edinin."))
        self.loginTitle.setText(_translate("LoginDialog", "Giriş Yap"))
        self.usernameInput.setPlaceholderText(_translate("LoginDialog", "Kullanıcı adınızı girin"))
        self.passwordInput.setPlaceholderText(_translate("LoginDialog", "Şifrenizi girin"))
        self.forgotPasswordLink.setText(_translate("LoginDialog", "Şifremi Unuttum"))
        self.loginButton.setText(_translate("LoginDialog", "Giriş Yap"))
        self.switchToRegister.setText(_translate("LoginDialog", "Hesabınız yok mu? Kayıt olun"))
        self.registerTitle.setText(_translate("LoginDialog", "Kayıt Ol"))
        self.fullNameInput.setPlaceholderText(_translate("LoginDialog", "Adınız ve soyadınız"))
        self.registerUsernameInput.setPlaceholderText(_translate("LoginDialog", "Kullanıcı adı"))
        self.emailInput.setPlaceholderText(_translate("LoginDialog", "E-posta adresiniz"))
        self.registerPasswordInput.setPlaceholderText(_translate("LoginDialog", "Şifre"))
        self.confirmPasswordInput.setPlaceholderText(_translate("LoginDialog", "Şifrenizi tekrar girin"))
        self.privacyCheckbox.setText(_translate("LoginDialog", "Gizlilik sözleşmesini okudum ve kabul ediyorum"))
        self.privacyLink.setText(_translate("LoginDialog", "Gizlilik sözleşmesini oku"))
        self.registerButton.setText(_translate("LoginDialog", "Kayıt Ol"))
        self.switchToLogin.setText(_translate("LoginDialog", "Zaten hesabınız var mı? Giriş yapın"))
        self.privacyTitle.setText(_translate("LoginDialog", "Gizlilik Sözleşmesi"))
        self.privacyText.setText(_translate("LoginDialog", "SOSYALPİYON GİZLİLİK SÖZLEŞMESİ\n\n"
"1. Kişisel Verilerin Korunması\n"
"- Kullanıcı bilgileriniz güvenli bir şekilde saklanır ve şifrelenir\n"
"- Üçüncü taraflarla paylaşılmaz\n"
"- KVKK kapsamında korunur\n"
"- Verileriniz sadece hizmet kalitesini artırmak için kullanılır\n\n"
"2. Veri Kullanımı\n"
"- Hesap yönetimi ve kimlik doğrulama için kullanılır\n"
"- Hizmet kalitesini artırmak için analiz edilir\n"
"- Spam ve kötüye kullanımı önlemek için kullanılır\n"
"- Satranç oyun istatistiklerinizi kaydetmek için kullanılır\n\n"
"3. Çerezler ve Oturum Yönetimi\n"
"- Oturum yönetimi için kullanılır\n"
"- Kullanıcı tercihlerini hatırlamak için kullanılır\n"
"- Güvenlik için kullanılır\n"
"- Satranç oyun ayarlarınızı saklamak için kullanılır\n\n"
"4. Güvenlik Önlemleri\n"
"- SSL şifreleme kullanılır\n"
"- Düzenli güvenlik güncellemeleri yapılır\n"
"- Veri yedekleme sistemleri mevcuttur\n"
"- İki faktörlü kimlik doğrulama seçeneği sunulur\n\n"
"5. Kullanıcı Hakları\n"
"- Verilerinize erişim hakkı\n"
"- Verilerinizin düzeltilmesini talep etme hakkı\n"
"- Verilerinizin silinmesini talep etme hakkı\n"
"- Veri işlemeye itiraz etme hakkı\n\n"
"6. İletişim\n"
"Gizlilik politikamız hakkında sorularınız için:\n"
"E-posta: bariscanceken@hotmail.com\n"
"Telefon: +90 (530) 579 29 36"))
        self.backToRegisterButton.setText(_translate("LoginDialog", "Geri Dön"))
        self.forgotPasswordTitle.setText(_translate("LoginDialog", "Şifremi Unuttum"))
        self.forgotPasswordDescription.setText(_translate("LoginDialog", "E-posta adresinizi girin, size şifre sıfırlama bağlantısı gönderelim."))
        self.forgotPasswordEmailInput.setPlaceholderText(_translate("LoginDialog", "E-posta adresiniz"))
        self.sendResetLinkButton.setText(_translate("LoginDialog", "Şifre Sıfırlama Bağlantısı Gönder"))
        self.backToLoginLink.setText(_translate("LoginDialog", "Giriş sayfasına dön"))
        self.verificationTitle.setText(_translate("LoginDialog", "E-posta Doğrulama"))
        self.verificationDescription.setText(_translate("LoginDialog", "E-posta adresinize gönderilen 6 haneli doğrulama kodunu girin."))
        self.verificationCodeInput.setPlaceholderText(_translate("LoginDialog", "Doğrulama kodu"))
        self.verifyCodeButton.setText(_translate("LoginDialog", "Doğrula"))
        self.resendCodeLink.setText(_translate("LoginDialog", "Kodu tekrar gönder"))
        self.resetPasswordTitle.setText(_translate("LoginDialog", "Şifre Sıfırlama"))
        self.resetPasswordDescription.setText(_translate("LoginDialog", "E-posta adresinize gönderilen 6 haneli doğrulama kodunu girin."))
        self.resetCodeInput.setPlaceholderText(_translate("LoginDialog", "Doğrulama kodu"))
        self.verifyResetCodeButton.setText(_translate("LoginDialog", "Kodu Doğrula"))
        self.resendResetCodeLink.setText(_translate("LoginDialog", "Kodu tekrar gönder"))
        self.newPasswordTitle.setText(_translate("LoginDialog", "Yeni Şifre Belirleme"))
        self.newPasswordDescription.setText(_translate("LoginDialog", "Lütfen yeni şifrenizi belirleyin."))
        self.newPasswordInput.setPlaceholderText(_translate("LoginDialog", "Yeni şifre"))
        self.confirmNewPasswordInput.setPlaceholderText(_translate("LoginDialog", "Yeni şifrenizi tekrar girin"))
        self.saveNewPasswordButton.setText(_translate("LoginDialog", "Şifreyi Kaydet"))


class LoginDialog(QtWidgets.QDialog):
    def __init__(self):
        super().__init__()
        self.ui = Ui_LoginDialog()
        self.ui.setupUi(self)
        self.setFixedSize(1000, 700)
        self.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.setFocus()
        self.fade_in()
        
        # Tıklama olaylarını bağla
        self.db = DatabaseConnection()
        self.ui.loginButton.clicked.connect(self.login)
        self.ui.registerButton.clicked.connect(self.register)
        self.ui.switchToRegister.mousePressEvent = self.switch_to_register
        self.ui.switchToLogin.mousePressEvent = self.switch_to_login
        self.ui.forgotPasswordLink.mousePressEvent = self.show_forgot_password
        self.ui.privacyLink.mousePressEvent = self.show_privacy
        self.ui.backToRegisterButton.clicked.connect(self.switch_to_register)
        self.ui.backToLoginLink.mousePressEvent = self.switch_to_login
        self.ui.sendResetLinkButton.clicked.connect(self.handle_send_reset_link)
        self.ui.verifyCodeButton.clicked.connect(self.handle_verify_code)
        self.ui.resendCodeLink.mousePressEvent = self.handle_resend_code
        self.ui.verifyResetCodeButton.clicked.connect(self.handle_verify_reset_code)
        self.ui.resendResetCodeLink.mousePressEvent = self.handle_resend_reset_code
        self.ui.saveNewPasswordButton.clicked.connect(self.handle_save_new_password)
        self.user_id = None
        
        try:
            self.engine = chess.engine.SimpleEngine.popen_uci(r"C:\Users\baris\OneDrive\Masaüstü\sosyalpiyon\stockfish\stockfish-windows-x86-64-avx2.exe")
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Stockfish Hatası", f"Stockfish motoru başlatılamadı:\n{e}")
            self.engine = None

    def fade_in(self):
        self.setWindowOpacity(0)
        self.anim = QtCore.QPropertyAnimation(self, b"windowOpacity")
        self.anim.setDuration(200)
        self.anim.setStartValue(0)
        self.anim.setEndValue(1)
        self.anim.start()

    def login(self):
        global global_user_id

        username = self.ui.usernameInput.text()
        password = self.ui.passwordInput.text()

        conn = self.db.get_connection()
        cursor = conn.cursor()

        cursor.execute("SELECT id, password_hash FROM users WHERE username = %s", (username,))
        result = cursor.fetchone()

        global_user_id = result

        if result:
            user_id, stored_hash = result
            stored_hash = stored_hash.encode('utf-8')  # hash'i byte'a çevir

            if bcrypt.checkpw(password.encode('utf-8'), stored_hash):
                print("Giriş başarılı")
                self.user_id = user_id  # 🔥 Giriş başarılıysa user_id'yi ata
                self.accept()
            else:
                print("Hatalı şifre")
        else:
            print("Kullanıcı bulunamadı")

        cursor.close()
        conn.close()

    def register(self):
        if not self.ui.privacyCheckbox.isChecked():
            QtWidgets.QMessageBox.warning(self, "Uyarı", "Lütfen gizlilik sözleşmesini kabul edin.")
            return
            
        full_name = self.ui.fullNameInput.text().strip()
        username = self.ui.registerUsernameInput.text().strip()
        email = self.ui.emailInput.text().strip()
        password = self.ui.registerPasswordInput.text()
        confirm_password = self.ui.confirmPasswordInput.text()
        
        if not all([full_name, username, email, password, confirm_password]):
            QtWidgets.QMessageBox.warning(self, "Uyarı", "Lütfen tüm alanları doldurun.")
            return
            
        if password != confirm_password:
            QtWidgets.QMessageBox.warning(self, "Uyarı", "Şifreler eşleşmiyor!")
            return
            
        # E-posta formatını kontrol et
        if '@' not in email or '.' not in email:
            QtWidgets.QMessageBox.warning(self, "Uyarı", "Lütfen geçerli bir e-posta adresi girin.")
            return
            
        try:
            # Kullanıcı adı ve e-posta kontrolü
            connection = self.db.get_connection()
            cursor = connection.cursor()
            
            cursor.execute("SELECT id FROM users WHERE username = %s OR email = %s", (username, email))
            if cursor.fetchone():
                QtWidgets.QMessageBox.warning(self, "Uyarı", "Bu kullanıcı adı veya e-posta adresi zaten kullanılıyor.")
                return
                
            # 6 haneli doğrulama kodu oluştur
            verification_code = ''.join(random.choices(string.digits, k=6))
            
            # Doğrulama kodunu veritabanına kaydet
            cursor.execute("""
                INSERT INTO email_verification_codes (email, code, created_at)
                VALUES (%s, %s, NOW())
            """, (email, verification_code))
            connection.commit()
            
            # E-posta gönderme işlemi
            sender_email = "sosyalpiyon@gmail.com"
            sender_password = "alyy pxax qtkx bfbk"
            
            message = MIMEMultipart()
            message["From"] = sender_email
            message["To"] = email
            message["Subject"] = "SosyalPiyon - E-posta Doğrulama Kodu"
            
            body = f"""
            Merhaba {full_name},

            SosyalPiyon'a hoş geldiniz! Hesabınızı aktifleştirmek için aşağıdaki doğrulama kodunu kullanın:

            {verification_code}

            Bu kod 1 saat geçerlidir.

            Saygılarımızla,
            SosyalPiyon Ekibi
            """
            
            message.attach(MIMEText(body, "plain"))
            
            # E-postayı gönder
            with smtplib.SMTP("smtp.gmail.com", 587) as server:
                server.starttls()
                server.login(sender_email, sender_password)
                server.send_message(message)
            
            # Kullanıcı bilgilerini geçici olarak sakla
            self.temp_user_data = {
                'full_name': full_name,
                'username': username,
                'email': email,
                'password': password
            }
            
            # Doğrulama sayfasına yönlendir
            self.ui.stackedWidget.setCurrentWidget(self.ui.emailVerificationPage)
            QtWidgets.QMessageBox.information(self, "Başarılı", "Doğrulama kodu e-posta adresinize gönderildi.")
            
        except Exception as e:
            error_message = f"Kayıt işlemi sırasında bir hata oluştu: {str(e)}"
            print(error_message)
            QtWidgets.QMessageBox.critical(self, "Hata", error_message)

    def forget_token(self, user_email):
        try:
            # 6 haneli rastgele kod oluştur
            token = ''.join(random.choices(string.digits, k=6))
            
            try:
                # E-posta gönderme işlemi
                sender_email = "sosyalpiyon@gmail.com"
                sender_password = "alyy pxax qtkx bfbk"

                # E-posta mesajını oluştur
                message = MIMEMultipart()
                message["From"] = sender_email
                message["To"] = user_email
                message["Subject"] = "SosyalPiyon - Şifre Sıfırlama Kodu"

                body = f"""
                Merhaba,

                Şifre sıfırlama talebiniz alındı. Şifrenizi sıfırlamak için aşağıdaki kodu kullanın:

                {token}

                Bu kod 1 saat geçerlidir.

                Eğer bu talebi siz yapmadıysanız, lütfen bu e-postayı dikkate almayın.

                Saygılarımızla,
                SosyalPiyon Ekibi
                """

                message.attach(MIMEText(body, "plain"))

                # SMTP sunucusuna bağlan ve e-postayı gönder
                with smtplib.SMTP("smtp.gmail.com", 587) as server:
                    server.starttls()
                    print("SMTP sunucusuna bağlanılıyor...")
                    server.login(sender_email, sender_password)
                    print("Giriş başarılı, e-posta gönderiliyor...")
                    server.send_message(message)
                    print("E-posta gönderildi!")

                print(f"E-posta başarıyla gönderildi: {user_email}")
                
            except smtplib.SMTPAuthenticationError as auth_error:
                print(f"Kimlik doğrulama hatası: {str(auth_error)}")
                return False, "E-posta kimlik doğrulama hatası. Lütfen uygulama şifresini kontrol edin."
            except Exception as email_error:
                print(f"E-posta gönderme hatası detayı: {str(email_error)}")
                return False, f"E-posta gönderilirken bir hata oluştu: {str(email_error)}"
            
            try:
                # Önce tablonun varlığını kontrol et
                connection = self.db.get_connection()
                cursor = connection.cursor()
                cursor.execute("SHOW TABLES LIKE 'password_reset_tokens'")
                if not cursor.fetchone():
                    # Tablo yoksa oluştur
                    cursor.execute("""
                        CREATE TABLE IF NOT EXISTS password_reset_tokens (
                            id INT AUTO_INCREMENT PRIMARY KEY,
                            email VARCHAR(255) NOT NULL,
                            token VARCHAR(6) NOT NULL,
                            created_at DATETIME NOT NULL
                        )
                    """)
                    connection.commit()
                    print("password_reset_tokens tablosu oluşturuldu")
                
                # Token'ı veritabanına kaydet
                cursor.execute("""
                    INSERT INTO password_reset_tokens (email, token, created_at)
                    VALUES (%s, %s, NOW())
                """, (user_email, token))
                connection.commit()
                print("Token veritabanına kaydedildi")
                
            except Exception as db_error:
                error_message = f"Veritabanı hatası detayı: {str(db_error)}"
                print(error_message)
                return False, error_message
            
            return True, "Şifre sıfırlama kodu e-posta adresinize gönderildi."
            
        except Exception as e:
            error_message = f"Genel hata detayı: {str(e)}"
            print(error_message)
            return False, error_message


    def switch_to_register(self, event=None):
        self.ui.stackedWidget.setCurrentWidget(self.ui.registerPage)

    def switch_to_login(self, event=None):
        self.ui.stackedWidget.setCurrentWidget(self.ui.loginPage)

    def show_forgot_password(self, event):
        self.ui.stackedWidget.setCurrentWidget(self.ui.forgotPasswordPage)

    def show_privacy(self, event):
        self.ui.stackedWidget.setCurrentWidget(self.ui.privacyPage)

    def handle_send_reset_link(self):
        email = self.ui.forgotPasswordEmailInput.text().strip()
        
        if not email:
            QtWidgets.QMessageBox.warning(self, "Uyarı", "Lütfen e-posta adresinizi girin.")
            return
            
        # E-posta formatını kontrol et
        if '@' not in email or '.' not in email:
            QtWidgets.QMessageBox.warning(self, "Uyarı", "Lütfen geçerli bir e-posta adresi girin.")
            return
            
        # E-posta adresinin veritabanında olup olmadığını kontrol et
        try:
            connection = self.db.get_connection()
            cursor = connection.cursor()
            cursor.execute("SELECT id FROM users WHERE email = %s", (email,))
            if not cursor.fetchone():
                QtWidgets.QMessageBox.warning(self, "Uyarı", "Bu e-posta adresi ile kayıtlı bir hesap bulunamadı.")
                return
                
            # Token oluştur ve e-posta gönder
            success, message = self.forget_token(email)
            
            if success:
                QtWidgets.QMessageBox.information(self, "Başarılı", message)
                self.ui.stackedWidget.setCurrentWidget(self.ui.resetPasswordPage)
            else:
                QtWidgets.QMessageBox.critical(self, "Hata", message)
                
        except Exception as e:
            error_message = f"Bir hata oluştu: {str(e)}"
            QtWidgets.QMessageBox.critical(self, "Hata", error_message)
            print(f"Genel hata: {error_message}")

    def handle_verify_code(self):
        code = self.ui.verificationCodeInput.text().strip()
        
        if not code:
            QtWidgets.QMessageBox.warning(self, "Uyarı", "Lütfen doğrulama kodunu girin.")
            return
            
        try:
            connection = self.db.get_connection()
            cursor = connection.cursor()
            
            # Kodu kontrol et
            cursor.execute("""
                SELECT email FROM email_verification_codes 
                WHERE code = %s AND email = %s 
                AND created_at > DATE_SUB(NOW(), INTERVAL 1 HOUR)
            """, (code, self.temp_user_data['email']))
            
            result = cursor.fetchone()
            
            if result:
                # Kullanıcıyı kaydet
                full_name = self.temp_user_data['full_name']
                name_parts = full_name.split()
                firstname = name_parts[0]
                lastname = " ".join(name_parts[1:]) if len(name_parts) > 1 else ""
                
                cursor.execute("""
                    INSERT INTO users (username, firstname, lastname, email, password_hash)
                    VALUES (%s, %s, %s, %s, %s)
                """, (
                    self.temp_user_data['username'],
                    firstname,
                    lastname,
                    self.temp_user_data['email'],
                    bcrypt.hashpw(self.temp_user_data['password'].encode('utf-8'), bcrypt.gensalt())
                ))
                
                # Kullanıcı ID'sini al
                user_id = cursor.lastrowid
                
                # Gizlilik sözleşmesi kabulünü kaydet
                cursor.execute("""
                    INSERT INTO privacy_policy_acceptance (user_id, policy_version)
                    VALUES (%s, %s)
                """, (user_id, 1))
                
                # Kullanılan doğrulama kodunu sil
                cursor.execute("""
                    DELETE FROM email_verification_codes 
                    WHERE code = %s AND email = %s
                """, (code, self.temp_user_data['email']))
                
                connection.commit()
                
                QtWidgets.QMessageBox.information(self, "Başarılı", "Kayıt işlemi tamamlandı! Giriş yapabilirsiniz.")
                self.ui.stackedWidget.setCurrentWidget(self.ui.loginPage)
                
            else:
                QtWidgets.QMessageBox.warning(self, "Uyarı", "Geçersiz veya süresi dolmuş kod.")
                
        except Exception as e:
            error_message = f"Doğrulama sırasında bir hata oluştu: {str(e)}"
            print(error_message)
            QtWidgets.QMessageBox.critical(self, "Hata", error_message)

    def handle_resend_code(self, event):
        # Yeni doğrulama kodu gönderme işlemleri burada yapılacak
        print("Yeni doğrulama kodu gönderiliyor")

    def handle_verify_reset_code(self):
        code = self.ui.resetCodeInput.text().strip()
        email = self.ui.forgotPasswordEmailInput.text().strip()
        
        if not code:
            QtWidgets.QMessageBox.warning(self, "Uyarı", "Lütfen doğrulama kodunu girin.")
            return
            
        try:
            # Token'ı veritabanında kontrol et
            connection = self.db.get_connection()
            cursor = connection.cursor()
            cursor.execute("""
                SELECT created_at FROM password_reset_tokens 
                WHERE token = %s AND email = %s 
                AND created_at > DATE_SUB(NOW(), INTERVAL 1 HOUR)
            """, (code, email))
            
            result = cursor.fetchone()
            
            if result:
                # Token geçerli, yeni şifre sayfasına yönlendir
                self.ui.stackedWidget.setCurrentWidget(self.ui.newPasswordPage)
                # Kullanıcı e-postasını sakla
                self.reset_email = email
                self.reset_token = code
            else:
                QtWidgets.QMessageBox.warning(self, "Uyarı", "Geçersiz veya süresi dolmuş kod.")
                
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Hata", f"Kod doğrulanırken bir hata oluştu: {str(e)}")

    def handle_resend_reset_code(self, event):
        # Yeni şifre sıfırlama kodu gönderme işlemleri burada yapılacak
        print("Yeni şifre sıfırlama kodu gönderiliyor")

    def handle_save_new_password(self):
        new_password = self.ui.newPasswordInput.text()
        confirm_password = self.ui.confirmNewPasswordInput.text()
        
        if not new_password or not confirm_password:
            QtWidgets.QMessageBox.warning(self, "Uyarı", "Lütfen yeni şifrenizi girin.")
            return
            
        if new_password != confirm_password:
            QtWidgets.QMessageBox.warning(self, "Uyarı", "Şifreler eşleşmiyor!")
            return
            
        try:
            # Yeni şifreyi veritabanında güncelle
            connection = self.db.get_connection()
            cursor = connection.cursor()
            
            # Şifreyi güncelle
            cursor.execute("""
                UPDATE users 
                SET password_hash = %s 
                WHERE email = %s
            """, (bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt()), self.reset_email))
            
            # Kullanılan token'ı sil
            cursor.execute("""
                DELETE FROM password_reset_tokens 
                WHERE token = %s AND email = %s
            """, (self.reset_token, self.reset_email))
            
            connection.commit()
            
            QtWidgets.QMessageBox.information(self, "Başarılı", "Şifreniz başarıyla güncellendi!")
            self.ui.stackedWidget.setCurrentWidget(self.ui.loginPage)
            
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Hata", f"Şifre güncellenirken bir hata oluştu: {str(e)}")


class MainPage(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        uic.loadUi('page-main.ui', self)
        self.setFixedSize(1000, 700)
        self.fade_in()
        self.findChild(QtWidgets.QPushButton, "gamesButton").clicked.connect(self.open_games_page)

    def fade_in(self):
        self.setWindowOpacity(0)
        self.anim = QtCore.QPropertyAnimation(self, b"windowOpacity")
        self.anim.setDuration(400)
        self.anim.setStartValue(0)
        self.anim.setEndValue(1)
        self.anim.start()

    def open_games_page(self):
        self.games_page = GamesPage()
        self.games_page.show()
        self.close()

class GamesPage(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        uic.loadUi('page-games.ui', self)
        self.setFixedSize(1000, 700)
        self.fade_in()
        self.findChild(QtWidgets.QPushButton, "addGameButton").clicked.connect(self.open_add_game_dialog)
        # Sidebar Ana Sayfa butonu ile ana pencereye dön
        self.findChild(QtWidgets.QPushButton, "homeButton").clicked.connect(self.go_home)
        self.myGamesList = self.findChild(QtWidgets.QListWidget, "myGamesList")
        self.allGamesList = self.findChild(QtWidgets.QListWidget, "allGamesList")
        self.db = DatabaseConnection()
        self.all_games() 
        self.my_games()
        self.allGamesList.itemDoubleClicked.connect(self.open_game_analysis)
        self.myGamesList.itemDoubleClicked.connect(self.open_game_analysis)

    def fade_in(self):
        self.setWindowOpacity(0)
        self.anim = QtCore.QPropertyAnimation(self, b"windowOpacity")
        self.anim.setDuration(400)
        self.anim.setStartValue(0)
        self.anim.setEndValue(1)
        self.anim.start()

    def open_add_game_dialog(self):
        dialog = AddGameDialog()
        dialog.exec_()

    def go_home(self):
        self.main_page = MainPage()
        self.main_page.show()
        self.close()

    def all_games(self):
        conn = self.db.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT id,user_id, moves FROM games")  
        games = cursor.fetchall()
        self.allGamesList.clear()
        for game in games:
            game_id = game[0]
            user_id = game[1]
            move_text = game[2]
            self.allGamesList.addItem(f"Game #{game_id} , User #{user_id}: {move_text[:50]}")

    def my_games(self):
        global global_user_id
        conn = self.db.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT id,user_id, moves FROM games where user_id = '%s'",(global_user_id[0],)) 
        games = cursor.fetchall()
        self.myGamesList.clear()
        for game in games:
            game_id = game[0]
            user_id = game[1]
            move_text = game[2]
            self.myGamesList.addItem(f"Game #{game_id} , User #{user_id}: {move_text[:50]}")
        

    def open_game_analysis(self, item):
        # Seçilen oyunun indexini al
        index = self.allGamesList.row(item) if self.sender() == self.allGamesList else self.myGamesList.row(item)
        # Oyun bilgilerini tekrar çek (veya games listesini bir yerde tutabilirsin)
        conn = self.db.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT moves FROM games")
        games = cursor.fetchall()
        moves = games[index][0]
        dialog = ChessAnalysisDialog(moves)
        dialog.show()


class AddGameDialog(QtWidgets.QDialog):
    def __init__(self):
        self.db = DatabaseConnection()
        super().__init__()
        uic.loadUi('add-game-dialog.ui', self)
        self.setFixedSize(1000, 700)
        self.fade_in()
        # Geri Dön butonunu çalışır yap
        back_btn = self.findChild(QtWidgets.QPushButton, "cancelButton")
        if back_btn:
            back_btn.clicked.connect(self.close)
        save_btn = self.findChild(QtWidgets.QPushButton, "saveButton")
        save_btn.clicked.connect(self.save_pgn)
        

    def fade_in(self):
        self.setWindowOpacity(0)
        self.anim = QtCore.QPropertyAnimation(self, b"windowOpacity")
        self.anim.setDuration(400)
        self.anim.setStartValue(0)
        self.anim.setEndValue(1)
        self.anim.start()

    def save_pgn(self):
        global global_user_id
        conn = self.db.get_connection()
        cursor = conn.cursor()
        fen_text_edit = self.findChild(QtWidgets.QTextEdit, "fenTextEdit")
        fen_text = fen_text_edit.toPlainText()
        cursor.execute("INSERT INTO games (user_id,moves) VALUES (%s,%s)",(global_user_id[0],fen_text))
        conn.commit()


class ChessBoardWidget(QtWidgets.QWidget):
    def __init__(self, board, on_move_callback, allow_moves=True):
        super().__init__()
        self.board = board
        self.on_move_callback = on_move_callback
        self.selected_square = None
        self.allow_moves = allow_moves
        self.grid = QGridLayout()
        self.grid.setSpacing(0)
        self.grid.setContentsMargins(0, 0, 0, 0)
        self.setLayout(self.grid)
        self.buttons = [[QPushButton() for _ in range(8)] for _ in range(8)]
        for i in range(8):
            for j in range(8):
                btn = self.buttons[i][j]
                btn.setFixedSize(80, 80)
                btn.setMinimumSize(80, 80)
                btn.setMaximumSize(80, 80)
                color = '#eeeed2' if (i + j) % 2 == 0 else '#769656'
                btn.setStyleSheet(
                    f'background-color: {color}; border: none; padding: 0px; margin: 0px;'
                )
                btn.setContentsMargins(0, 0, 0, 0)
                btn.setIconSize(QtCore.QSize(80, 80))
                btn.clicked.connect(self.make_click_handler(i, j))
                self.grid.addWidget(btn, i, j)
        self.update_board()

    def resizeEvent(self, event):
        for i in range(8):
            for j in range(8):
                btn = self.buttons[i][j]
                btn.setIconSize(btn.size())
        super().resizeEvent(event)

    def make_click_handler(self, i, j):
        def handler():
            if not self.allow_moves:
                return
            square = chess.square(j, 7 - i)
            if self.selected_square is None:
                piece = self.board.piece_at(square)
                if piece and ((piece.color and self.board.turn) or (not piece.color and not self.board.turn)):
                    self.selected_square = square
                    self.highlight_square(i, j, True)
            else:
                move = chess.Move(self.selected_square, square)
                if move in self.board.legal_moves:
                    self.on_move_callback(move)
                self.clear_highlights()
                self.selected_square = None
        return handler

    def highlight_square(self, i, j, highlight=True):
        btn = self.buttons[i][j]
        color = '#2d2d2d' if (i + j) % 2 == 0 else '#1a1a1a'
        if highlight:
            btn.setStyleSheet(f'background-color: {color}; border: 3px solid #4CAF50; padding: 0px; margin: 0px;')
        else:
            btn.setStyleSheet(f'background-color: {color}; border: none; padding: 0px; margin: 0px;')

    def clear_highlights(self):
        for i in range(8):
            for j in range(8):
                self.highlight_square(i, j, False)

    def update_board(self):
        for i in range(8):
            for j in range(8):
                btn = self.buttons[i][j]
                square = chess.square(j, 7 - i)
                piece = self.board.piece_at(square)
                btn.setIcon(QtGui.QIcon())
                btn.setText("")
                if piece:
                    piece_str = piece.symbol()
                    img_path = os.path.join('materials', PIECE_IMAGES[piece_str])
                    if os.path.exists(img_path):
                        icon = QtGui.QIcon(QtGui.QPixmap(img_path))
                        btn.setIcon(icon)
                        btn.setIconSize(btn.size())
                        btn.setText("")
                    else:
                        btn.setText(piece_str)
                        btn.setIcon(QtGui.QIcon())
                else:
                    btn.setIcon(QtGui.QIcon())
                    btn.setText("")


class ChessAnalysisDialog(QtWidgets.QWidget):
    def __init__(self, moves, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Satranç Analiz")
        self.setStyleSheet("""
            QWidget { background-color: #181818; color: #fff; }
            QListWidget { background: #232323; color: #fff; font-size: 18px; padding: 8px; }
            QFrame { background: #232323; }
            QPushButton { background: transparent; border: 2px solid #4CAF50; color: #4CAF50; font-size: 16px; font-weight: bold; }
            QPushButton:hover { background: #4CAF50; color: #fff; }
            QLabel { color: #4CAF50; font-size: 18px; font-weight: bold; }
        """)
        self.board = chess.Board()
        self.move_stack = []
        self.current_move = 0
        self.engine = chess.engine.SimpleEngine.popen_uci(r"C:\Users\baris\OneDrive\Masaüstü\sosyalpiyon\stockfish\stockfish-windows-x86-64-avx2.exe")
        self.eval_timer = QtCore.QTimer()
        self.eval_timer.setInterval(300)
        self.eval_timer.timeout.connect(self.update_eval_bar)
        self.eval_timer.start()
        # PGN veya SAN yükleme ve başlıkları çekme
        pgn = None
        headers = {}
        try:
            pgn = chess.pgn.read_game(io.StringIO(moves))
            if pgn:
                headers = pgn.headers
        except Exception:
            pgn = None
        if pgn:
            node = pgn
            while node.variations:
                next_node = node.variation(0)
                self.board.push(next_node.move)
                node = next_node
        else:
            for move in moves.split():
                try:
                    self.board.push_san(move)
                except Exception:
                    break
        self.original_moves = list(self.board.move_stack)
        # Bilgi paneli için başlıkları hazırla
        white = headers.get("White", "-")
        black = headers.get("Black", "-")
        result = headers.get("Result", "-")
        event = headers.get("Event", "-")
        # Ana layout
        main_layout = QVBoxLayout()
        # Üstte bilgi paneli
        info_panel = QHBoxLayout()
        self.label_players = QLabel(f"Beyaz: {white} | Siyah: {black} | Tür: {event}")
        self.label_players.setStyleSheet('font-size: 18px; color: #fff;')
        self.label_winner = QLabel(f"Sonuç: {result}")
        self.label_winner.setStyleSheet('font-size: 18px; color: #4CAF50;')
        info_panel.addWidget(self.label_players)
        info_panel.addStretch()
        info_panel.addWidget(self.label_winner)
        main_layout.addLayout(info_panel)
        # Alt ana layout (tahta + sağ panel)
        bottom_layout = QHBoxLayout()
        # Eval bar
        self.eval_bar = QProgressBar()
        self.eval_bar.setOrientation(QtCore.Qt.Vertical)
        self.eval_bar.setMinimum(-1000)
        self.eval_bar.setMaximum(1000)
        self.eval_bar.setValue(0)
        self.eval_bar.setFormat("")
        self.eval_bar.setTextVisible(False)
        self.eval_bar.setFixedWidth(30)
        self.eval_bar.setStyleSheet("""
            QProgressBar {
                background: #232323;
                border: 2px solid #4CAF50;
                margin: 8px;
            }
            QProgressBar::chunk {
                background-color: qlineargradient(x1:0, y1:1, x2:0, y2:0, stop:0 #e53935, stop:1 #4CAF50);
            }
        """)
        bottom_layout.addWidget(self.eval_bar, 0)
        self.chessboard_widget = ChessBoardWidget(self.board, self.on_move, allow_moves=False)
        bottom_layout.addWidget(self.chessboard_widget, 2)
        # Sağ panel
        right_panel = QVBoxLayout()
        self.main_move_list = QListWidget()
        self.main_move_list.setFont(QtGui.QFont('Segoe UI', 18))
        self.main_move_list.setSpacing(6)
        self.main_move_list.setSelectionMode(QListWidget.SingleSelection)
        self.main_move_list.itemClicked.connect(self.goto_move_from_list)
        right_panel.addWidget(self.main_move_list)
        self.status_label = QLabel()
        self.status_label.setAlignment(QtCore.Qt.AlignCenter)
        self.status_label.setStyleSheet('font-size: 22px; font-weight: bold; color: #4CAF50; background: transparent;')
        right_panel.addWidget(self.status_label)
        button_layout = QHBoxLayout()
        self.prev_button = QPushButton("← Geri")
        self.next_button = QPushButton("İleri →")
        self.prev_button.setFixedHeight(40)
        self.next_button.setFixedHeight(40)
        self.prev_button.setFont(QtGui.QFont('Segoe UI', 12))
        self.next_button.setFont(QtGui.QFont('Segoe UI', 12))
        self.prev_button.clicked.connect(self.go_back)
        self.next_button.clicked.connect(self.go_forward)
        button_layout.addWidget(self.prev_button)
        button_layout.addWidget(self.next_button)
        right_panel.addLayout(button_layout)
        right_frame = QFrame()
        right_frame.setLayout(right_panel)
        right_frame.setFrameShape(QFrame.StyledPanel)
        right_frame.setFixedWidth(300)
        right_frame.setStyleSheet('background: #232323;')
        bottom_layout.addWidget(right_frame, 1)
        main_layout.addLayout(bottom_layout)
        self.setLayout(main_layout)
        self.update_status()
        self.update_move_list()
        self.resize(900, 630)
        self.update_eval_bar()
    def goto_move_from_list(self, item):
        idx = self.main_move_list.row(item)
        self.board = chess.Board()
        moves = list(self.original_moves)
        for i in range(idx + 1):
            if i < len(moves):
                self.board.push(moves[i])
        self.chessboard_widget.board = self.board
        self.chessboard_widget.update_board()
        self.update_status()
        self.update_eval_bar()
        self.main_move_list.setCurrentRow(idx)
    def update_move_list(self):
        self.main_move_list.clear()
        moves = list(self.board.move_stack)
        board = chess.Board()
        for idx, move in enumerate(moves):
            san = board.san(move)
            if idx % 2 == 0:
                self.main_move_list.addItem(f"{1 + idx // 2}. {san}")
            else:
                self.main_move_list.addItem(f"   {san}")
            board.push(move)
        if self.main_move_list.count() > 0:
            self.main_move_list.scrollToBottom()
            self.main_move_list.setCurrentRow(self.main_move_list.count() - 1)

    def update_eval_bar(self):
        try:
            board = self.board
            info = self.engine.analyse(board, chess.engine.Limit(time=0.1))
            score = info["score"].white().score(mate_score=1000)
            if score is None:
                score = 0
            self.eval_bar.setValue(score)
        except Exception as e:
            self.eval_bar.setValue(0)

    def on_move(self, move):
        self.board.push(move)
        self.chessboard_widget.board = self.board
        self.chessboard_widget.update_board()
        self.update_status()
        self.update_eval_bar()

    def update_status(self):
        if self.board.turn:
            self.status_label.setText("Sıra: Beyaz")
        else:
            self.status_label.setText("Sıra: Siyah")

    def go_back(self):
        if self.board.move_stack:
            move = self.board.pop()
            self.move_stack.append(move)
            self.board.push(move)
            self.chessboard_widget.update_board()
            self.update_status()
            self.update_eval_bar()

    def go_forward(self):
        if self.move_stack:
            move = self.move_stack.pop()
            self.board.push(move)
            self.chessboard_widget.update_board()
            self.update_status()
            self.update_eval_bar()

    def closeEvent(self, event):
        try:
            self.engine.quit()
        except Exception:
            pass
        event.accept()


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    login_dialog = LoginDialog()
    if login_dialog.exec_() == QtWidgets.QDialog.Accepted:
        main_page = MainPage()
        main_page.show()
        sys.exit(app.exec_())
